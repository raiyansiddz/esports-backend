// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/contests": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to create a new contest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create a new contest",
                "parameters": [
                    {
                        "description": "Contest data",
                        "name": "contest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Contest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Contest"
                        }
                    }
                }
            }
        },
        "/admin/esports-teams": {
            "get": {
                "description": "Get list of all eSports teams with their players",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get all eSports teams",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ESportsTeam"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to create a new eSports team",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create a new eSports team",
                "parameters": [
                    {
                        "description": "Team data",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ESportsTeam"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ESportsTeam"
                        }
                    }
                }
            }
        },
        "/admin/matches": {
            "get": {
                "description": "Get list of all matches",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get all matches",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Match"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to create a new match",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create a new match",
                "parameters": [
                    {
                        "description": "Match data",
                        "name": "match",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Match"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Match"
                        }
                    }
                }
            }
        },
        "/admin/matches/{id}/status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to update match status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update match status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Match ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/players": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to create a new player",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create a new player",
                "parameters": [
                    {
                        "description": "Player data",
                        "name": "player",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Player"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Player"
                        }
                    }
                }
            }
        },
        "/admin/stats/match/{matchId}/player/{playerId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to update player stats for a match",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update player match statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Match ID",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Player ID",
                        "name": "playerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Player statistics",
                        "name": "stats",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateStatsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/tournaments": {
            "get": {
                "description": "Get list of all tournaments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get all tournaments",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tournament"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to create a new tournament",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create a new tournament",
                "parameters": [
                    {
                        "description": "Tournament data",
                        "name": "tournament",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tournament"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Tournament"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get authenticated user's profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/send-otp": {
            "post": {
                "description": "Send OTP for authentication (displayed in console for testing)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Send OTP to phone number",
                "parameters": [
                    {
                        "description": "Phone number",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/verify-otp": {
            "post": {
                "description": "Verify OTP and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify OTP and authenticate user",
                "parameters": [
                    {
                        "description": "Phone number and OTP",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/contests/match/{matchId}": {
            "get": {
                "description": "Get all contests available for a specific match",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contests"
                ],
                "summary": "Get contests for a match",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Match ID",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Contest"
                            }
                        }
                    }
                }
            }
        },
        "/contests/{id}": {
            "get": {
                "description": "Get detailed information about a specific contest",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contests"
                ],
                "summary": "Get contest details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Contest"
                        }
                    }
                }
            }
        },
        "/contests/{id}/leaderboard": {
            "get": {
                "description": "Get the current leaderboard for a contest",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contests"
                ],
                "summary": "Get contest leaderboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contest ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of entries to return (default: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.LeaderboardEntry"
                            }
                        }
                    }
                }
            }
        },
        "/fantasy/teams": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all fantasy teams created by the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fantasy"
                ],
                "summary": "Get user's fantasy teams",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FantasyTeam"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new fantasy team for a contest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fantasy"
                ],
                "summary": "Create a fantasy team",
                "parameters": [
                    {
                        "description": "Fantasy team data",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.FantasyTeam"
                        }
                    }
                }
            }
        },
        "/payment/create-order": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a Razorpay payment order for wallet top-up",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Create payment order",
                "parameters": [
                    {
                        "description": "Payment order data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePaymentOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/payment/success": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Handle successful payment callback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Handle payment success",
                "parameters": [
                    {
                        "description": "Payment success data",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile data",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/wallet": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current wallet balance for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user wallet balance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number",
                                "format": "float64"
                            }
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "WebSocket connection for real-time updates",
                "tags": [
                    "websocket"
                ],
                "summary": "WebSocket endpoint",
                "responses": {
                    "101": {
                        "description": "Switching Protocols"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Contest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "current_entries": {
                    "type": "integer"
                },
                "entry_fee": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "invite_code": {
                    "type": "string"
                },
                "is_private": {
                    "type": "boolean"
                },
                "locked_at": {
                    "type": "string"
                },
                "match": {
                    "$ref": "#/definitions/models.Match"
                },
                "match_id": {
                    "type": "string"
                },
                "max_entries": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "prize_pool": {
                    "description": "JSON structure for prize distribution",
                    "type": "string"
                },
                "prizes_distributed": {
                    "type": "boolean"
                },
                "status": {
                    "description": "open, locked, completed, cancelled",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.CreatePaymentOrderRequest": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "contest_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                }
            }
        },
        "models.CreateTeamRequest": {
            "type": "object",
            "required": [
                "captain_id",
                "contest_id",
                "player_ids",
                "team_name",
                "vice_captain_id"
            ],
            "properties": {
                "captain_id": {
                    "type": "string"
                },
                "contest_id": {
                    "type": "string"
                },
                "player_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "team_name": {
                    "type": "string"
                },
                "vice_captain_id": {
                    "type": "string"
                }
            }
        },
        "models.ESportsTeam": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "logo_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Player"
                    }
                }
            }
        },
        "models.FantasyTeam": {
            "type": "object",
            "properties": {
                "contest": {
                    "$ref": "#/definitions/models.Contest"
                },
                "contest_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FantasyTeamPlayer"
                    }
                },
                "rank": {
                    "type": "integer"
                },
                "team_name": {
                    "type": "string"
                },
                "total_points": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.FantasyTeamPlayer": {
            "type": "object",
            "properties": {
                "fantasy_team": {
                    "$ref": "#/definitions/models.FantasyTeam"
                },
                "fantasy_team_id": {
                    "type": "string"
                },
                "is_captain": {
                    "type": "boolean"
                },
                "is_vice_captain": {
                    "type": "boolean"
                },
                "player": {
                    "$ref": "#/definitions/models.Player"
                },
                "player_id": {
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "models.Match": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "map_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "description": "upcoming, locked, live, completed, cancelled",
                    "type": "string"
                },
                "tournament": {
                    "$ref": "#/definitions/models.Tournament"
                },
                "tournament_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Player": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "credit_value": {
                    "type": "number"
                },
                "esports_team": {
                    "$ref": "#/definitions/models.ESportsTeam"
                },
                "esports_team_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "description": "rusher, assaulter, support, sniper",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Tournament": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "game_type": {
                    "description": "BGMI, Valorant, etc.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "description": "upcoming, live, completed",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.UpdateStatsRequest": {
            "type": "object",
            "properties": {
                "is_mvp": {
                    "type": "boolean"
                },
                "kills": {
                    "type": "integer"
                },
                "knockouts": {
                    "type": "integer"
                },
                "revives": {
                    "type": "integer"
                },
                "survival_time_minutes": {
                    "type": "integer"
                },
                "team_kill_penalty": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_balance": {
                    "type": "number"
                }
            }
        },
        "models.VerifyOTPRequest": {
            "type": "object",
            "required": [
                "otp",
                "phone_number"
            ],
            "properties": {
                "otp": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "services.LeaderboardEntry": {
            "type": "object",
            "properties": {
                "points": {
                    "type": "number"
                },
                "rank": {
                    "type": "integer"
                },
                "team_id": {
                    "type": "string"
                },
                "team_name": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "localhost:8001",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "eSports Fantasy API",
	Description:      "Advanced eSports Fantasy backend with PhonePe payments, Firebase auth, auto-management, analytics and real-time features",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
